using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using quiet;
using System;
using System.Threading.Tasks;
using System.Linq;

[RequireComponent(typeof(CreatePlantMap))]
public class CreatureManager : MonoBehaviour
{
    [Range(0, 10)]
    public static int startingCreatures = 10;

    [Range(0, 10)]
    public static int maxCreatures = 20;

    [Range(0, 20)]
    public static int startingPlants = 1000;

    public static Dictionary<int, Creature> creatures;

    public static Stack<int> toRemove = new();
    public static Stack<IDamagable> toDamage = new();
    public static IEnumerable<GameObject> GetCreatureObjects() => creatures.Select(kv => kv.Value.obj);

    [SerializeField]
    GameObject creaturePrefab;

    [SerializeField]
    GameObject bedPrefab;

    [SerializeField]
    GameObject plantPrefab;

    [SerializeField]
    private static GameObject staticCreature;
    private static GameObject staticBed;
    private static GameObject staticPlant;

    public static CreatePlantMap plantMap;

    public Dictionary<(int, int), bool> plantGrid;

    // Start is called before the first frame update
    void Start()
    {
        creatures = new(maxCreatures);
        plantGrid = new(startingPlants);

        for (int i = 0; i < startingCreatures; i++)
        {
            Creature creature = new(UnityUtils.Spawn(creaturePrefab, VectorUtils.GetRandomPoint_2D((0.0f, 70.0f), (0, 39))));
            creature.MyBed = UnityUtils.Spawn(bedPrefab, creature.obj.transform.position);
            creatures.Add(creature.obj.GetInstanceID(), creature);
            Debug.Log(creature.obj.GetInstanceID());
            creature.data.Association = i % 2;
        }

        for (int i = 0; i < startingPlants; i++)
        {
            // Old, simple spawn logic
            // UnityUtils.Spawn(plantPrefab, VectorUtils.GetRandomPoint_2D((-50.0f, 50.0f), (-50.0f, 50.0f)));

            // New spawn logic, using the probability grid generated by CreatePlantMap
            SpawnPlant();
        }

        staticCreature = creaturePrefab;
        staticBed = bedPrefab;
        staticPlant = plantPrefab;

        plantMap = GetComponent<CreatePlantMap>();

        toSpawn = new();
    }

    private static Stack<Vector3> toSpawn;
    public static void QueueSpawn(Vector3 pos)
    {
        toSpawn.Push(pos);
    }
    
    /// <summary>
    /// Plant spawning logic, relying on the CreatePlantMap script
    /// </summary>
    public void SpawnPlant()
    {
        plantMap = GetComponent<CreatePlantMap>();
        bool continueSelecting = true;
        (int, int) selected = (-1, -1);
        while(continueSelecting)
        {
            selected = (
                UnityEngine.Random.Range(0, plantMap.PlantProbabilityGrid.GetLength(0)),
                UnityEngine.Random.Range(0, plantMap.PlantProbabilityGrid.GetLength(1))
                );

            // 0 (black) will (almost) always succeed, and 255 will (almost) always fail
            var random = UnityEngine.Random.Range(0, 257);
            continueSelecting = !CheckRepeat(selected) && random <= (int)plantMap.PlantProbabilityGrid[(byte)selected.Item1, (byte)selected.Item2];
        }

        plantGrid[selected] = true;

        UnityUtils.Spawn(plantPrefab, plantMap.grid.GetCellCenterWorld(new(selected.Item1, selected.Item2)).StripZ());
    }

    /// <summary>
    /// This is largely just the opposite of 
    /// </summary>
    /// <param name="plantMap"></param>
    public static void SpawnCreature(Vector3 pos, int association = -1)
    {
        Vector3Int gridPos = plantMap.grid.WorldToCell(pos);
        Color pixel = plantMap.creatureMap.texture.GetPixel(gridPos.x, gridPos.y);


        Creature creature = new(UnityUtils.Spawn(staticCreature, plantMap.grid.GetCellCenterWorld(gridPos)));
        creature.MyBed = UnityUtils.Spawn(staticBed, creature.obj.transform.position);
        creatures.Add(creature.obj.GetInstanceID(), creature);
        creature.data.Association = association;

        creature.data.MaxHealth = (int)quiet.Math.Map(pixel.r, 0, 1, 1, 20);
        creature.data.LibidoMultiplier = pixel.r + pixel.b > 1.2f ? 2 : 1;

        if(creature.data.LibidoMultiplier > 1)
        {
            Debug.Log("LET'S GO");
        }

        if (pixel.r + pixel.b + pixel.g > 2.8f)
        {
            creature.data.Diet = Diet.Carnivore;
        }
    }

    public bool CheckRepeat((int, int) key)
    {
        if (plantGrid.ContainsKey(key))
        {
            return plantGrid[key];
        }
        return false;
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.anyKeyDown)
        {
            var state = creatures.First().Value.GetState();
            Debug.Log(state);
            Debug.Log(Convert.ToString((int)state, 2).PadLeft(8, '0'));
        }

        while (toDamage.Count > 0)
        {
            toDamage.Pop().Damage();
        }

        while (toRemove.Count > 0)
        {
            int i = toRemove.Pop();
            Destroy(creatures[i].MyBed);
            creatures.Remove(i);
            Debug.Log(creatures.Count);
        }

        while (toSpawn.Count > 0)
        {
            if(creatures.Count >= maxCreatures)
            {
                toSpawn.Pop();
            } else
            {
                SpawnCreature(toSpawn.Pop());
            }
        }

        foreach (Creature creature in creatures.Values)
        {
            if (creature != null)
            {
                creature.Update();
            }
        }
    }

    public void AgeCreature(CreatureData data)
    {
        data.Age += 1;
    }

    private void OnApplicationQuit()
    {
        foreach(Creature creature in creatures.Values)
        {
            creature.Dispose();
        }
    }

    public static void Remove(int index)
    {
        if(creatures.ContainsKey(index))
            toRemove.Push(index);
    }

    public static void Damage(IDamagable d)
    {
        toDamage.Push(d);
    }
}
